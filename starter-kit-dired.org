#+TITLE: Starter Kit Dired
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Dired

** Basic settings
#+name: dired-dwim
#+begin_src emacs-lisp
  (setq dired-dwim-target 1
	dired-isearch-filenames 'dwim
	dired-listing-switches "-v -AlR --group-directories-first --human-readable --ignore=.git"
        dired-trivial-filenames "\\`\\.\\.?\\'\\|\\`#\\|\\`\\.")
#+end_src

Adding support for additional compression formats with p7zip. For supported
formats see https://www.7-zip.org/

Be sure to add the compression format to the font lock file extension
variables below.

#+name: dired-aux-compress
#+begin_src emacs-lisp
  (eval-after-load "dired-aux"
    '(progn
       (dolist (rule
		;; uncompress with dired-compress (Z)
		'(("\\.iso\\'" "" "7z x -aoa -o%o %i")
		  ("\\.msi\\'" "" "7z x -aoa -o%o %i")
		  ("\\.rar\\'" "" "7z x -aoa -o%o %i")
		  ("\\.vhd\\'" "" "7z x -aoa -o%o %i")
		  ("\\.zip\\'" "" "7z x -aoa -o%o %i")))
	 (add-to-list 'dired-compress-file-suffixes rule))
       (dolist (rule
		;; compress with dired-do-compress-to (c)
		'(("\\.zip\\'" . "7z a -tzip %o %i")
		  ("\\.7z\\'" . "7z a -t7z %o %i")))
	 (add-to-list 'dired-compress-files-alist rule))))
#+end_src

** Dired-x
Loading Dired-X will automatically put on the hook ‘dired-extra-startup’ to
‘dired-mode-hook’ to get extra Dired features:
+ V -- run mail on folder (see ‘dired-bind-vm’)
+ I -- run info on file
+ N -- run man on file
+ F -- visit all marked files simultaneously
+ C-x M-o -- toggle omitting of files
+ M-( -- mark by Lisp expression

#+name: dired-x
#+begin_src emacs-lisp
  (defun my/load-dired-x () (load-library "dired-x"))
  (add-hook 'dired-load-hook #'my/load-dired-x)
#+end_src

** Key bindings
Also see [[./starter-kit-hydras.org][starter-kit-hydras.org]] for additional key bindings.

*** my/diredp-ediff
Taken from Dired+
See https://github.com/emacsmirror/dired-plus/blob/master/dired%2B.el

  "Compare file at cursor with file FILE2 using `ediff'.
FILE2 defaults to the file at the cursor as well.  If you enter just a
directory name for FILE2, then the file at the cursor is compared with
a file of the same name in that directory.  FILE2 is the second file
given to `ediff'; the file at the cursor is the first.
Try to guess a useful default value for FILE2, as follows:
 * If the mark is active, use the file at mark.
 * Else if the file at cursor is a autosave file or a backup file, use
   the corresponding base file.
 * Else if there is any backup file for the file at point, use the
   newest backup file for it.
 * Else use the file at point."
#+begin_src emacs-lisp
(defun my/diredp-ediff (file2)             ; Bound to `='
  (interactive (progn (require 'ediff)
                      (list (ediff-read-file-name ; In `ediff-util.el'.
                             (format "Compare %s with" (dired-get-filename t))
                             (dired-current-directory)
                             (let* ((file           (dired-get-filename))
                                    (file-sans-dir  (file-name-nondirectory file))
                                    (file-dir       (file-name-directory file))
                                    (file-at-mark   (and transient-mark-mode
                                                         mark-active
                                                         (save-excursion (goto-char (mark t))
                                                                         (dired-get-filename t t))))
                                    (last-backup    (file-newest-backup file)))
                               (cond
                                 (file-at-mark)
                                 ((auto-save-file-name-p file-sans-dir)
                                  (expand-file-name (substring file-sans-dir 1 -1) file-dir))
                                 ((backup-file-name-p file-sans-dir)
                                  (expand-file-name (file-name-sans-versions file-sans-dir) file-dir))
                                 (last-backup)
                                 (t file)))))))
  (ediff-files (dired-get-filename) file2)) ; In `ediff.el'.
#+end_src

*** my/dired-maybe-insert-subdir
#+name: my/dired-maybe-insert-subdir
#+begin_src emacs-lisp
  (defun my/dired-maybe-insert-subdir (dirname &optional
					    switches no-error-if-not-dir-p)
      (interactive
       (list (dired-get-filename)
	     (if current-prefix-arg
		 (read-string "Switches for listing: "
			      (or dired-subdir-switches dired-actual-switches)))))
     (let ((filename (dired-get-filename)))
	   (if (file-directory-p filename)
	       (let ((opoint (point)))
		 (dired-maybe-insert-subdir dirname switches nil)
		 (if (bound-and-true-p dired-hide-details-mode)
		     (recenter 1)
		   (recenter 2)))
	     (if (string-match-p tramp-file-name-regexp filename)
		     (dired-find-file)
		   (browse-url-of-dired-file)))))
#+end_src

*** my/dired-do-compress-to
#+name: my/dired-do-compress-to
#+begin_src emacs-lisp
  (defun my/dired-do-compress-to (&optional arg)
    "Compress or uncompress marked (or next ARG) files.
    Prompt for the archive file name.
    Choose the archiving command based on the archive file-name extension
    and `dired-compress-files-alist'."
    (interactive)
    (require 'dired-aux)
    (let* ((current (dired-get-filename t))
	   ;; Get the file at the mark.
	   (default (if (and transient-mark-mode mark-active)
			     (save-excursion (goto-char (mark t))
					     (dired-get-filename t t))))
	   (in-files (dired-get-marked-files))
	   (out-file (expand-file-name (read-file-name "Compress to: " (dired-dwim-target-directory) default)))
	   (rule (cl-find-if
		  (lambda (x)
		    (string-match (car x) out-file))
		  dired-compress-files-alist)))
      (cond ((not rule)
	     (error
	      "No compression rule found for %s, see `dired-compress-files-alist'"
	      out-file))
	    ((and (file-exists-p out-file)
		  (not (y-or-n-p
			(format "%s exists, overwrite?"
				(abbreviate-file-name out-file)))))
	     (message "Compression aborted"))
	    (t
	     (when (zerop
		    (dired-shell-command
		     (format-spec (cdr rule)
				  `((?\o . ,(shell-quote-argument out-file))
				    (?\i . ,(mapconcat
					     (lambda (file-desc)
					       (shell-quote-argument file-desc))
					     in-files " "))))))
	       (message "Compressed %d file(s) to %s"
			(length in-files)
			(file-name-nondirectory out-file)))))))
#+end_src

*** my/dired-mode-keys
#+name: dired-mode-hook-keys
#+begin_src emacs-lisp
  (defun my/dired-mode-keys ()
    "my keys for `dired'."
    (define-key dired-mode-map (kbd "<tab>")       'dired-hide-subdir)
    (define-key dired-mode-map (kbd "C-<tab>")     'dired-hide-all)
    (define-key dired-mode-map (kbd "i")           'my/dired-maybe-insert-subdir)
    (define-key dired-mode-map (kbd "c")           'my/dired-do-compress-to)
    (define-key dired-mode-map (kbd "e")           'my/diredp-ediff)
    (define-key dired-mode-map (kbd "C-M-i")       'dired-jump) ; like in org-mode
    (define-key dired-mode-map (kbd "<return>")    'my/dired-maybe-insert-subdir)
    (define-key dired-mode-map (kbd "<backspace>") 'dired-jump) ; like in Windows Explorer

    ;; use same keys with modifiers as speed keys
    (local-set-key "\M-." 'my/dired-maybe-insert-subdir))

  ;;; Enable my key bindings
  (add-hook 'dired-mode-hook #'my/dired-mode-keys)
#+end_src

** Customize dired font lock and faces
#+name: dired-customize-faces
#+begin_src emacs-lisp
  (defcustom my/dired-compressed-extensions
    '(".tar" ".tgz" ".gz" ".rar" ".7z" ".deb" ".zip"
      ".iso" ".msi" ".vhd")
    "*List of compressed-file extensions, for highlighting."
    :type '(repeat string) :group 'dired-faces)

  (defface my/dired-compressed-file-suffix
    '((t                   (:foreground "PaleGreen")))
    "*Face used for compressed file suffixes in Dired buffers.
  This means the `.' plus the file extension.  Example: `.zip'."
    :group 'dired-faces)
  (defvar my/dired-compressed-file-suffix 'my/dired-compressed-file-suffix)

  (defcustom my/dired-file-name-maybe-date-extensions
    '(".pdf" ".jpg" ".png")
    "*List of file-name-maybe-date extensions, for highlighting."
    :type '(repeat string) :group 'dired-faces)

  (defface my/dired-file-name-maybe-date-face
    '((t                   (:foreground "IndianRed2")))
    "*Face used for file name suffixes and dates in files with
  `my/dired-file-name-maybe-date-extensions' in Dired buffers.
  This applies to `yyyy-mm-dd' or `yyyy_mm_dd' parts of the file name."
    :group 'dired-faces)
  (defvar my/dired-file-name-maybe-date-face 'my/dired-file-name-maybe-date-face)

  (defcustom my/dired-file-name-maybe-date-extensions2
    '(".txt" ".org" ".doc" ".docx" ".wps")
    "*List of file-name-maybe-date extensions, for highlighting."
    :type '(repeat string) :group 'dired-faces)

  (defface my/dired-file-name-maybe-date-face2
    '((t                   (:foreground "Gold")))
    "*Face used for file name suffixes and dates in files with
  `my/dired-file-name-maybe-date-extensions' in Dired buffers.
  This applies to `yyyy-mm-dd' or `yyyy_mm_dd' parts of the file name."
    :group 'dired-faces)
  (defvar my/dired-file-name-maybe-date-face2 'my/dired-file-name-maybe-date-face2)
#+end_src

#+name: dired-font-lock-keywords
#+begin_src emacs-lisp
  (defvar my/dired-font-lock-keywords
    (list
     ;;
     ;; Dired marks.
     (list dired-re-mark '(0 dired-mark-face))
     ;;
     ;; Marked files.
     (list (concat "^[" (char-to-string dired-marker-char) "]")
           '(".+" (dired-move-to-filename) nil (0 dired-marked-face)))
     ;;
     ;; Flagged files.
     (list (concat "^[" (char-to-string dired-del-marker) "]")
           '(".+" (dired-move-to-filename) nil (0 dired-flagged-face)))
     ;;
     ;; Subdirectories.
     (list dired-re-dir
           '(".+" (dired-move-to-filename) nil (0 dired-directory-face)))
     ;;
     ;; Files suffixed with `completion-ignored-extensions'.
     '(eval .
            ;; It is quicker to first find just an extension, then go back to the
            ;; start of that file name.  So we do this complex MATCH-ANCHORED form.
            (list (concat "\\(" (regexp-opt completion-ignored-extensions) "\\|#\\)$")
                  '(".+" (dired-move-to-filename) nil (0 dired-ignored-face))))
     ;;
     ;; Files suffixed with `completion-ignored-extensions'
     ;; plus a character put in by -F.
     '(eval .
            (list (concat "\\(" (regexp-opt completion-ignored-extensions)
                          "\\|#\\)[*=|]$")
                  '(".+" (progn
                           (end-of-line)
                           ;; If the last character is not part of the filename,
                           ;; move back to the start of the filename
                           ;; so it can be fontified.
                           ;; Otherwise, leave point at the end of the line;
                           ;; that way, nothing is fontified.
                           (unless (get-text-property (1- (point)) 'mouse-face)
                             (dired-move-to-filename)))
                    nil (0 dired-ignored-face))))
     ;;
     ;; Explicitly put the default face on file names ending in a colon to
     ;; avoid fontifying them as directory header.
     (list (concat dired-re-maybe-mark dired-re-inode-size dired-re-perms ".*:$")
           '(".+" (dired-move-to-filename) nil (0 'default)))
     ;;
     ;; Directory headers.
     (list dired-subdir-regexp '(1 dired-header-face))

     ;;
     ;; Files suffixed with `my/dired-file-name-maybe-date-extensions'
     ;; plus occurrences of the prefix date in the filename (on the same line)
     ;; are highlighted with a bolder face.
     (list (concat "\\(" (concat (funcall #'regexp-opt my/dired-file-name-maybe-date-extensions) "\\)[*]?$"))
           1 my/dired-file-name-maybe-date-face t)
     '(eval .
            (list (concat "\\(" (regexp-opt my/dired-file-name-maybe-date-extensions)
                          "\\|#\\)$")
                  '("\\(\\([0-9][0-9][0-9][0-9]\\)[ \_\-]\\([0-1][0-9]\\)[ \_\-]\\([0-3][0-9]\\)\\)"
                    (dired-move-to-filename) nil (1 my/dired-file-name-maybe-date-face prepend))))

     ;;
     ;; Files suffixed with `my/dired-file-name-maybe-date-extensions2'
     ;; plus occurrences of the prefix date in the filename (on the same line)
     ;; are highlighted with a bolder face.
     (list (concat "\\(" (concat (funcall #'regexp-opt my/dired-file-name-maybe-date-extensions2) "\\)[*]?$"))
           1 my/dired-file-name-maybe-date-face2 t)
     '(eval .
            (list (concat "\\(" (regexp-opt my/dired-file-name-maybe-date-extensions2)
                          "\\|#\\)$")
                  '("\\(\\([0-9][0-9][0-9][0-9]\\)[ \_\-]\\([0-1][0-9]\\)[ \_\-]\\([0-3][0-9]\\)\\)"
                    (dired-move-to-filename) nil (1 my/dired-file-name-maybe-date-face2 prepend))))

     (list (concat "\\(" (concat (funcall #'regexp-opt my/dired-compressed-extensions) "\\)[*]?$"))
           '(".+" (dired-move-to-filename) nil (0 my/dired-compressed-file-suffix)))
     )
    "Expressions to highlight in Dired mode.")

  (defun my/dired-mode-hook-font-lock ()
    (setq-local font-lock-defaults
                '(my/dired-font-lock-keywords t nil nil beginning-of-line))
    (font-lock-refresh-defaults))
  (add-hook 'dired-mode-hook #'my/dired-mode-hook-font-lock)
#+end_src

#+RESULTS: dired-font-lock-defaults
: Additional expressions to highlight in Dired mode.

** Initial Dired state
#+name: dired-mode-hook-setup
#+begin_src emacs-lisp
  ;;; Turn off omit from Dired-x.
  (setq dired-omit-size-limit nil) ; No maximum size for Omit.
  (setq-default dired-omit-mode nil) ; Turn off Omit mode (buffer-local).

  ;;; Turn on Hide details mode.
  (add-hook 'dired-mode-hook #'dired-hide-details-mode)

  ;;; Turn on Truncate lines mode.
  (add-hook 'dired-mode-hook #'toggle-truncate-lines)
#+end_src

** Dired
#+begin_src emacs-lisp
  (load-library "dired")
  (defvar dired-mode-map)

  (declare-function dired-mark "dired")
  (defhydra my/hydra-dired-marked-items (dired-mode-map "")
    "
%(dired-mark-prompt nil (dired-get-marked-files)): "
    ("m" dired-mark                      "mark")
    ("<backspace>" dired-unmark-backward "unmark back")
    ("u" dired-unmark                    "unmark")
    ("t" dired-toggle-marks              "toggle")
    ("k" dired-do-kill-lines             "kill")
    ("C-n" dired-next-marked-file        "next")
    ("C-p" dired-prev-marked-file        "prev")
    ("*" hydra-dired-mark-special/body   "mark special" :color teal)
    ("U" dired-unmark-all-marks          "unmark all" :color blue)
    ("q" nil                             "quit" :color blue))

  (declare-function dired-copy-filename-as-kill "dired")
  (defhydra hydra-dired-copy-filename-as-kill (dired-mode-map "")
      "
topdir: %(eval dired-directory)

copy: [C-u _w_]: path from topdir, [C-u 0 _w_]: path from root, "
      ("w" dired-copy-filename-as-kill "filename")
      ("q" nil :color blue))

  (defhydra hydra-dired-mark-special (:color blue)
    "mark"
    ("%"  dired-mark-files-regexp "regexp")
    ("("  dired-mark-sexp         "sexp")
    ("*"  dired-mark-executables  "executables")
    ("."  dired-mark-extension    "extension")
    ("/"  dired-mark-directories  "directories")
    ("@"  dired-mark-symlinks     "symlinks")
    ("O"  dired-mark-omitted      "omitted")
    ("s"  dired-mark-subdir-files "subdir files")
    ("q"  nil                     "quit"))

  (defhydra hydra-dired (:color blue :hint none)
      "
topdir: %(eval dired-directory)

    File             Inode          Marks            Display
  -----------------------------------------------------------------------------
    _d_ flag deletion  ^ ^               _m_ mark             ?(? _(_ details
    _x_ expunge        ^ ^               _*_ mark special     ?C-x M-o? _C-x M-o_ omitˣ
    ^ ^                _M_ chmod         ^ ^                  ^ ^
    _w_ copy path      _G_ chgrp         _F_ open markedˣ     _s_ sort
    _C_ copy           ^ ^               _D_ delete marked    ^ ^
    _R_ rename         Directory         ^ ^                  ^ ^
    ^ ^                ---------         ^ ^                  _C-M-i_ jump
    _e_ Ediff          _=_ diff          ^ ^                  _C-o_ view other window
    _c_ compress to    _+_ mkdir         _A_ find regexp      _o_ other window
    _Z_ (un)compress   _Z_ (un)tar.gz    _Q_ repl regexp      _g_ revert buf
    "
      ("C-M-i" dired-jump :color red)
      ("*" hydra-dired-mark-special/body :color teal)
      ("(" dired-hide-details-mode
         (if (bound-and-true-p dired-hide-details-mode)
           "[ ]" "[x]") :color red)
      ("C-x M-o" dired-omit-mode
         (if (bound-and-true-p dired-omit-mode)
           "[x]" "[ ]") :color red)
      ("+" dired-create-directory)
      ("=" dired-diff)
      ("?" dired-summary :color red)
      ("A" dired-do-find-regexp)
      ("C" dired-do-copy)
      ("c" my/dired-do-compress-to)
      ("d" dired-flag-file-deletion :color red)
      ("D" dired-do-delete)
      ("e" dired-ediff-files)
      ("F" dired-do-find-marked-files)
      ("G" dired-do-chgrp)
      ("g" revert-buffer)
      ("M" dired-do-chmod)
      ("m" my/hydra-dired-marked-items/dired-mark :color teal)
      ("C-o" dired-display-file :color red)
      ("o" dired-find-file-other-window)
      ("Q" dired-do-find-regexp-and-replace)
      ("R" dired-do-rename)
      ("s" dired-sort-toggle-or-edit :color red)
      ("w" hydra-dired-copy-filename-as-kill/body :color teal)
      ("x" dired-do-flagged-delete)
      ("Z" dired-do-compress)
      ("q" nil))
#+end_src

#+begin_src emacs-lisp
  (defun my/hydra-dired-mode-keys ()
    "my hydra keys for `dired'."
    (define-key dired-mode-map (kbd "?") 'hydra-dired/body))
  (add-hook 'dired-mode-hook #'my/hydra-dired-mode-keys)
#+end_src

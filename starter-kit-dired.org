#+TITLE: Starter Kit Dired
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Dired

** Basic settings
#+name: dired-dwim
#+begin_src emacs-lisp
  (setq dired-dwim-target 1
	dired-isearch-filenames 'dwim
	dired-listing-switches "-v -AlR --group-directories-first --human-readable"
        dired-trivial-filenames "\\`\\.\\.?\\'\\|\\`#\\|\\`\\.")
#+end_src

Adding support for additional compression formats with p7zip. For supported
formats see https://www.7-zip.org/

#+name: dired-aux-compress
#+begin_src emacs-lisp
  (eval-after-load "dired-aux"
    '(progn
       (dolist (rule
		;; uncompress with dired-compress (Z)
		'(("\\.iso\\'" "" "7z x -aoa -o%o %i")
		  ("\\.msi\\'" "" "7z x -aoa -o%o %i")
		  ("\\.rar\\'" "" "7z x -aoa -o%o %i")
		  ("\\.vhd\\'" "" "7z x -aoa -o%o %i")
		  ("\\.zip\\'" "" "7z x -aoa -o%o %i")))
	 (add-to-list 'dired-compress-file-suffixes rule))
       (dolist (rule
		;; compress with dired-do-compress-to (c)
		'(("\\.zip\\'" . "7z a -tzip %o %i")
		  ("\\.7z\\'" . "7z a -t7z %o %i")))
	 (add-to-list 'dired-compress-files-alist rule))))
#+end_src

** Dired-x
Loading Dired-X will automatically put on the hook ‘dired-extra-startup’ to
‘dired-mode-hook’ to get extra Dired features:
+ V -- run mail on folder (see ‘dired-bind-vm’)
+ I -- run info on file
+ N -- run man on file
+ F -- visit all marked files simultaneously
+ C-x M-o -- toggle omitting of files
+ M-( -- mark by Lisp expression

#+name: dired-x
#+begin_src emacs-lisp
  (defun my/load-dired-x () (load-library "dired-x"))
  (add-hook 'dired-load-hook #'my/load-dired-x)
#+end_src
** Key bindings
Also see [[./starter-kit-hydras.org][starter-kit-hydras.org]] for additional key bindings.

*** my/diredp-ediff
Taken from Dired+
See https://github.com/emacsmirror/dired-plus/blob/master/dired%2B.el

  "Compare file at cursor with file FILE2 using `ediff'.
FILE2 defaults to the file at the cursor as well.  If you enter just a
directory name for FILE2, then the file at the cursor is compared with
a file of the same name in that directory.  FILE2 is the second file
given to `ediff'; the file at the cursor is the first.
Try to guess a useful default value for FILE2, as follows:
 * If the mark is active, use the file at mark.
 * Else if the file at cursor is a autosave file or a backup file, use
   the corresponding base file.
 * Else if there is any backup file for the file at point, use the
   newest backup file for it.
 * Else use the file at point."
#+begin_src emacs-lisp
(defun my/diredp-ediff (file2)             ; Bound to `='
  (interactive (progn (require 'ediff)
                      (list (ediff-read-file-name ; In `ediff-util.el'.
                             (format "Compare %s with" (dired-get-filename t))
                             (dired-current-directory)
                             (let* ((file           (dired-get-filename))
                                    (file-sans-dir  (file-name-nondirectory file))
                                    (file-dir       (file-name-directory file))
                                    (file-at-mark   (and transient-mark-mode
                                                         mark-active
                                                         (save-excursion (goto-char (mark t))
                                                                         (dired-get-filename t t))))
                                    (last-backup    (file-newest-backup file)))
                               (cond
                                 (file-at-mark)
                                 ((auto-save-file-name-p file-sans-dir)
                                  (expand-file-name (substring file-sans-dir 1 -1) file-dir))
                                 ((backup-file-name-p file-sans-dir)
                                  (expand-file-name (file-name-sans-versions file-sans-dir) file-dir))
                                 (last-backup)
                                 (t file)))))))
  (ediff-files (dired-get-filename) file2)) ; In `ediff.el'.
#+end_src

*** my/dired-maybe-insert-subdir
#+name: my/dired-maybe-insert-subdir
#+begin_src emacs-lisp
  (defun my/dired-maybe-insert-subdir (dirname &optional
					    switches no-error-if-not-dir-p)
    (interactive
     (list (dired-get-filename)
	   (if current-prefix-arg
	       (read-string "Switches for listing: "
			    (or dired-subdir-switches dired-actual-switches)))))
    (let ((opoint (point)))
      (dired-maybe-insert-subdir dirname switches nil)
      (if (bound-and-true-p dired-hide-details-mode)
	  (recenter 1)
	(recenter 2))))
#+end_src


*** my/dired-do-compress-to
#+name: my/dired-do-compress-to
#+begin_src emacs-lisp
  (defun my/dired-do-compress-to (&optional arg)
    "Compress or uncompress marked (or next ARG) files.
    Prompt for the archive file name.
    Choose the archiving command based on the archive file-name extension
    and `dired-compress-files-alist'."
    (interactive)
    (let* ((current (dired-get-filename t))
	   ;; Get the file at the mark.
	   (default (if (and transient-mark-mode mark-active)
			     (save-excursion (goto-char (mark t))
					     (dired-get-filename t t))))
	   (in-files (dired-get-marked-files))
	   (out-file (expand-file-name (read-file-name "Compress to: " (dired-dwim-target-directory) default)))
	   (rule (cl-find-if
		  (lambda (x)
		    (string-match (car x) out-file))
		  dired-compress-files-alist)))
      (cond ((not rule)
	     (error
	      "No compression rule found for %s, see `dired-compress-files-alist'"
	      out-file))
	    ((and (file-exists-p out-file)
		  (not (y-or-n-p
			(format "%s exists, overwrite?"
				(abbreviate-file-name out-file)))))
	     (message "Compression aborted"))
	    (t
	     (when (zerop
		    (dired-shell-command
		     (format-spec (cdr rule)
				  `((?\o . ,(shell-quote-argument out-file))
				    (?\i . ,(mapconcat
					     (lambda (file-desc)
					       (shell-quote-argument file-desc))
					     in-files " "))))))
	       (message "Compressed %d file(s) to %s"
			(length in-files)
			(file-name-nondirectory out-file)))))))
#+end_src

*** my/dired-mode-keys
#+name: dired-mode-hook-keys
#+begin_src emacs-lisp
  (defun my/dired-mode-keys ()
    "my keys for `dired'."
    (define-key dired-mode-map (kbd "<tab>")       'dired-hide-subdir)
    (define-key dired-mode-map (kbd "C-<tab>")     'dired-hide-all)
    (define-key dired-mode-map (kbd "i")           'my/dired-maybe-insert-subdir)
    (define-key dired-mode-map (kbd "c")           'my/dired-do-compress-to)
    (define-key dired-mode-map (kbd "e")           'my/diredp-ediff)
    (define-key dired-mode-map (kbd "C-M-i")       'dired-jump) ; like in org-mode
    (define-key dired-mode-map (kbd "<backspace>") 'dired-jump) ; like in Windows Explorer

    ;; use same keys with modifiers as speed keys
    (local-set-key "\M-." 'my/dired-maybe-insert-subdir))
  (add-hook 'dired-mode-hook #'my/dired-mode-keys)
#+end_src

** Initial Dired state
#+name: dired-mode-hook-setup
#+begin_src emacs-lisp
  ;;; Turn off omit from Dired-x.
  (setq dired-omit-size-limit nil) ; No maximum size for Omit.
  (setq-default dired-omit-mode nil) ; Turn off Omit mode (buffer-local).

  ;;; Turn on Hide details mode.
  (add-hook 'dired-mode-hook #'dired-hide-details-mode)

  ;;; Turn on Truncate lines mode.
  (add-hook 'dired-mode-hook #'toggle-truncate-lines)
#+end_src

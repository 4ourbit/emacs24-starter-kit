#+TITLE: Starter Kit Org
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

This file is loaded in init.el even before all the rest in Emacs Starter
Kit:

(with-eval-after-load 'org
  (org-babel-load-file (expand-file-name "starter-kit-org.org" starter-kit-dir)))

This is to setup org-mode without restarting it later on. Therefore Emacs
Starter Kits' core functions are not available yet and can only be used in
hooks.

* Starter Kit Org
Configuration for the eminently useful [[http://orgmode.org/][Org Mode]].

Org-mode is for keeping notes, maintaining ToDo lists, doing project
planning, and authoring with a fast and effective plain-text system.
Org Mode can be used as a very simple folding outliner or as a complex
GTD system or tool for reproducible research and literate programming.

For more information on org-mode check out [[http://orgmode.org/worg/][worg]], a large Org-mode wiki
which is also *implemented using* Org-mode and [[http://git-scm.com/][git]].

** General setup
#+BEGIN_SRC emacs-lisp
  (setq org-startup-folded nil)  ;; do not fold on org file visit
#+END_SRC

** Set up hooks for clock persistence
#+BEGIN_SRC emacs-lisp
  (setq org-clock-persist 'history)  ;; running clock is not persisted
  (setq org-clock-persist-file "~/.emacs.d/.org.clock")

  (org-clock-persistence-insinuate)
#+END_SRC

Assume Emacs is running when work is clockable. Clock out before killing Emacs.
#+BEGIN_SRC emacs-lisp
  (defun my/org-query-clock-out ()
    "Ask the user before clocking out."
    (if (and (featurep 'org-clock)
             (funcall 'org-clocking-p)
             (yes-or-no-p "You are currently clocking time, clock out? "))
        (org-clock-out)
      t)) ;; only fails on keyboard quit or error
  (add-hook 'kill-emacs-query-functions 'my/org-query-clock-out)
#+END_SRC

** Org-Mode Hook -- Keybindings
The [[http://orgmode.org/manual/Agenda-Views.html#Agenda-Views][Org-mode agenda]] is good to have close at hand
#+begin_src emacs-lisp
  (define-key global-map "\C-cc" 'org-capture)
  (define-key global-map "\C-ca" 'org-todo-list)
#+end_src

Org-mode supports [[http://orgmode.org/manual/Hyperlinks.html#Hyperlinks][links]], this command allows you to store links
globally for later insertion into an Org-mode buffer.
See [[http://orgmode.org/manual/Handling-links.html#Handling-links][Handling-links]] in the Org-mode manual.
#+begin_src emacs-lisp
  (define-key global-map "\C-cl" 'org-store-link)
#+end_src

#+begin_src emacs-lisp
  (defun my/org-mode-keys ()
    "my keys for `org-mode'."
    ;; use same keys with modifiers as speed keys
    (local-set-key "\C-n" 'outline-next-visible-heading)
    (local-set-key "\C-p" 'outline-previous-visible-heading)
    (local-set-key "\C-f" 'outline-forward-same-level)
    (local-set-key "\C-b" 'outline-backward-same-level)

    (local-set-key "\M-." 'org-open-at-point)
    ;; default is "C-c C-c":
    (local-set-key "\M-\C-x" 'org-babel-execute-maybe))

    ;; (local-set-key "\M-\C-u" 'outline-up-heading)
    ;; ;; table
    ;; (local-set-key "\M-\C-w" 'org-table-copy-region)
    ;; (local-set-key "\M-\C-y" 'org-table-paste-rectangle)
    ;; (local-set-key "\M-\C-l" 'org-table-sort-lines)
    ;; ;; display images
    ;; (local-set-key "\M-I" 'org-toggle-iimage-in-org)

  (add-hook 'org-mode-hook #'my/org-mode-keys)
#+end_src

** Speed keys
   :PROPERTIES:
   :CUSTOM_ID: speed-keys
   :END:
Speed commands enable single-letter commands in Org-mode files when
the point is at the beginning of a headline, or at the beginning of a
code block.

See the `=org-speed-commands-default=' variable for a list of the keys
and commands enabled at the beginning of headlines.  All code blocks
are available at the beginning of a code block, the following key
sequence =C-c C-v h= (bound to `=org-babel-describe-bindings=') will
display a list of the code blocks commands and their related keys.

#+begin_src emacs-lisp
  ;; (setq org-use-speed-commands t)
#+end_src

** Code blocks
   :PROPERTIES:
   :CUSTOM_ID: babel
   :END:
This activates a number of widely used languages, you are encouraged
to activate more languages using the customize interface for the
`=org-babel-load-languages=' variable, or with an elisp form like the
one below.  The customize interface of `=org-babel-load-languages='
contains an up to date list of the currently supported languages.
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)))
#+end_src

You are encouraged to add the following to your personal configuration
although it is not added by default as a security precaution.
#+begin_src emacs-lisp :tangle no
  (setq org-confirm-babel-evaluate nil)
#+end_src

** Code block fontification
   :PROPERTIES:
   :CUSTOM_ID: code-block-fontification
   :END:
The following displays the contents of code blocks in Org-mode files
using the major-mode of the code.  It also changes the behavior of
=TAB= to as if it were used in the appropriate major mode.  This means
that reading and editing code form inside of your Org-mode files is
much more like reading and editing of code using its major mode.
#+begin_src emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
#+end_src

** The Library of Babel
   :PROPERTIES:
   :CUSTOM_ID: library-of-babel
   :END:
The library of babel contains makes many useful functions available
for use by code blocks in *any* emacs file.  See the actual
=library-of-babel.org= (located in the Org-mode =contrib/babel=
directory) file for information on the functions, and see
[[http://orgmode.org/worg/org-contrib/babel/intro.php#library-of-babel][worg:library-of-babel]] for more usage information.

Code blocks can be loaded into the library of babel from any Org-mode
file using the `org-babel-lob-ingest' function.

** Calendar customizations
#+begin_src emacs-lisp
  ;; (append holiday-general-holidays
  ;;       '((holiday-fixed 1 1 "Neujahr")
  ;;         (holiday-fixed 5 1 "1. Mai")
  ;;         (holiday-fixed 10 3 "Tag der Deutschen Einheit")))
  ;;
  (setq calendar-date-display-form '((if dayname (concat dayname ", ")) day ". " monthname " " year))
  (setq calendar-week-start-day 1)
#+end_src

** Combined Agenda iCal export customizations
#+begin_src emacs-lisp
  (setq org-icalendar-combined-name "Org-mode Agenda")
  (setq org-icalendar-combined-description "Org-mode Agenda")
  (setq org-icalendar-use-scheduled '(event-if-not-todo event-if-todo))
  (setq org-icalendar-alarm-time 5)
  (setq org-icalendar-date-time-format ":%Y%m%dT%H%M%SZ")
  (setq org-icalendar-include-body 0)
  (defun my/strip-org-todo-from-ical ()
    (interactive)
    (save-excursion
        (goto-char (point-min))
        (while (re-search-forward "S: TODO " nil t)
          (replace-match ""))))
  (defun my/set-file-coding-for-ical ()
    (interactive)
    (set-buffer-file-coding-system 'utf-8)
    (save-buffer))
  (add-hook 'org-before-save-iCalendar-file-hook 'my/strip-org-todo-from-ical)
  (add-hook 'org-after-save-iCalendar-file-hook 'my/set-file-coding-for-ical)
#+end_src

** Combined Agenda iCal export when saving org-files
#+begin_src emacs-lisp
  (defun my/org-agenda-redo-all-and-export ()
    (interactive)
    (when (derived-mode-p 'org-agenda-mode)
	(dolist (buffer (buffer-list))
	  (with-current-buffer buffer
	    (when (derived-mode-p 'org-agenda-mode)
	      (progn
		(org-agenda-redo t)
		(org-icalendar-combine-agenda-files 'async)))))))
  (add-hook 'org-mode-hook
	    (lambda()
	      (add-hook 'after-save-hook 'my/org-agenda-redo-all-and-export nil 'make-it-local)))
#+end_src

** Global enable agenda-follow-mode and narrow to task in indirect
#+begin_src emacs-lisp
(setq org-agenda-follow-indirect t)
(add-hook 'org-agenda-mode-hook #'org-agenda-follow-mode)
(advice-add 'org-agenda-goto :after
            (lambda (&rest args)
              (org-narrow-to-subtree)))
#+end_src

** Formatting CLOCKSUM lines
Format used when creating CLOCKSUM lines and when generating a time duration
(avoid showing days)
#+BEGIN_SRC emacs-lisp
  (setq org-time-clocksum-format
    '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))
#+END_SRC

** TODO Programmable completions and hippie completions
#+BEGIN_SRC emacs-lisp
  (defun my/add-hippie-expand-to-capf ()  ;; for `completion-at-point'
    (defun hippie-expand-at-point ()
      (hippie-expand 1))
    (add-to-list 'completion-at-point-functions 'hippie-expand-at-point t))
  (add-hook 'org-mode-hook #'my/add-hippie-expand-to-capf)

  (defun my/add-pcomplete-to-capf ()  ;; for `completion-at-point'
    (add-to-list 'completion-at-point-functions 'pcomplete-completions-at-point t))
  (add-hook 'org-mode-hook #'my/add-pcomplete-to-capf)
#+END_SRC

** Capture templates
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates '(
    ("t" "Todo" entry (file+headline org-my-capture-file "Tasks")
               "* TODO %?\n:PROPERTIES:\n:Created: %u\n:Effort:   Shift-Right\n:END:\n   %a")  ; template
    ("j" "Journal" entry (file+datetree org-my-capture-file)
               "* %?\nEntered on %u\n  %i\n  %a")))
#+END_SRC

** Open pdfs in user-defined app
PDFs visited in Org-mode either on export or links like [file+sys:links.pdf] are
opened in user-defined `=my-pdf-viewer=' (%s is used as file placeholder).
#+BEGIN_SRC emacs-lisp
  (defun my/org-pdf-file-app ()
    (add-to-list 'org-file-apps '("\\.pdf\\'" . my-pdf-viewer)))

  (add-hook 'org-mode-hook #'my/org-pdf-file-app)
#+END_SRC


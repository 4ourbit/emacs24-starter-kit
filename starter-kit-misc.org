#+TITLE: Starter Kit Misc
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

Use ':tangle no' to disable specific source blocks

* Starter Kit Misc
Things that don't fit anywhere else.

** Color Themes
Emacs24 has build in support for saving and loading themes.

A Theme builder is available at http://elpa.gnu.org/themes/ along with
a list of pre-built themes at http://elpa.gnu.org/themes/view.html and
themes are available through ELPA.

Downloaded themes may be saved to the =themes/= directory in the base
of the starter kit which ignored by git.  Once downloaded and
evaluated a theme is activated using the =load-theme= function.

** Window systems -- remove visual cruft                             :visual:
   :PROPERTIES:
   :CUSTOM_ID: window-system
   :END:
#+name: starter-kit-window-view-stuff-recommended
#+begin_src emacs-lisp 
(when window-system
  (menu-bar-mode -1)
  (tooltip-mode -1)
  (tool-bar-mode -1))
#+end_src

** Window systems
#+srcname: starter-kit-window-view-stuff
#+begin_src emacs-lisp
  (when window-system
    (setq frame-title-format '(buffer-file-name "%f" ("%b")))
    (setq blink-cursor-interval 0.5)
    ;; Split only into top and botton if a window is the only window on its
    ;; frame, or all the other ones are dedicated,
    (setq split-height-threshold nil)
    (set-default 'cursor-type 'box)
    (blink-cursor-mode 1)
    (when (require 'mwheel nil 'no-error) (mouse-wheel-mode t)))

  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)

  (setq echo-keystrokes 0.1
	font-lock-maximum-decoration t
	color-theme-is-global t
	shift-select-mode nil
	truncate-partial-width-windows nil
	uniquify-buffer-name-style 'forward
	ediff-window-setup-function 'ediff-setup-windows-plain
	xterm-mouse-mode t
	save-place-file (concat starter-kit-dir "places"))
#+end_src

** Transparently open compressed files
#+begin_src emacs-lisp
(auto-compression-mode t)
#+end_src

** Donâ€™t create lock files
Working with a single emacs instance.
#+begin_src emacs-lisp
(setq create-lockfiles nil)
#+end_src

** Save a list of recent files visited.
#+begin_src emacs-lisp 
(setq recentf-max-saved-items 999)
(recentf-mode 1)
#+end_src emacs-lisp

** Highlight matching parentheses when the point is on them.
#+srcname: starter-kit-match-parens
#+begin_src emacs-lisp 
(show-paren-mode 1)
#+end_src

** Insert matching pairs
#+begin_src emacs-lisp 
(electric-pair-mode 1)
#+end_src

** Doc-view adjustments
| Scansnap S1500 | Color / Grayscale | Monochrome | Simplex / Duplex |
|----------------+-------------------+------------+------------------|
| Normal mode    | 150 dpi           | 300 dpi    | 20 ppm           |
| Better mode    | 200 dpi           | 400 dpi    | 20 ppm           |
| Best mode      | 300 dpi           | 600 dpi    | 20 ppm           |
| Excellent mode | 600 dpi           | 1,200 dpi  | 5 ppm            |

#+begin_src emacs-lisp 
  (require 'doc-view)
  (setq doc-view-resolution 300)
#+end_src

** Other, spell checking, tabs, imenu and a coding hook
#+begin_src emacs-lisp 
  (set-default 'indicate-empty-lines t)
  (set-default 'imenu-auto-rescan t)

  (add-hook 'text-mode-hook 'turn-on-auto-fill)
  (eval-after-load "ispell"
    '(when (executable-find ispell-program-name)
       (add-hook 'text-mode-hook 'turn-on-flyspell)))

  (defalias 'yes-or-no-p 'y-or-n-p)
  ;; Seed the random-number generator
  (random t)
#+end_src

*** possible issues/resolutions with flyspell
Most of the solution came from [[http://www.emacswiki.org/emacs/FlySpell][EmacsWiki-FlySpell]].  Here is one
possible fix.

**** Emacs set path to aspell
it's possible aspell isn't in your path
#+begin_src emacs-lisp :tangle no
   (setq exec-path (append exec-path '("/opt/local/bin")))
#+end_src

**** Emacs specify spelling program
- This didn't work at first, possibly because cocoAspell was
  building its dictionary.  Now it seems to work fine.
#+begin_src emacs-lisp :tangle no
  (setq ispell-program-name "aspell"
        ispell-dictionary "english"
        ispell-dictionary-alist
        (let ((default '("[A-Za-z]" "[^A-Za-z]" "[']" nil
                         ("-B" "-d" "english" "--dict-dir"
                          "/Library/Application Support/cocoAspell/aspell6-en-6.0-0")
                         nil iso-8859-1)))
          `((nil ,@default)
            ("english" ,@default))))
#+end_src

** Hippie expand: at times perhaps too hip
#+begin_src emacs-lisp
  (when (boundp 'hippie-expand-try-functions-list)
    (delete 'try-expand-line hippie-expand-try-functions-list)
    (delete 'try-expand-list hippie-expand-try-functions-list))
#+end_src

** Don't clutter up directories with files~
Rather than saving backup files scattered all over the file system,
let them live in the =backup/= directory inside of the starter kit.
#+begin_src emacs-lisp
(setq backup-directory-alist `(("" . ,(expand-file-name (concat starter-kit-dir "backup"))))
      delete-old-versions 'keep-all-versions
      version-control '(t nil nil "Make numeric backup versions"))
#+end_src

** Default to unified diffs
#+begin_src emacs-lisp
(setq diff-switches "-u")
#+end_src

** Cosmetics
#+begin_src emacs-lisp
  (with-eval-after-load 'diff-mode
    (set-face-foreground 'diff-added "green4")
    (set-face-foreground 'diff-removed "red3"))
#+end_src


* Starter Kit Misc Additions
** my/keys-minor-mode-map
#+NAME keys-minor-mode-map
#+BEGIN_SRC emacs-lisp
  (defvar my/keys-minor-mode-map (make-keymap) "my/keys-mode keymap.")
  (define-minor-mode my/keys-minor-mode
    "A minor mode so that my key settings override any major modes." t " Keys"
    'my/keys-minor-mode-map)

  ;; SuperCollider
  (define-key my/keys-minor-mode-map (kbd "C-.") 'keyboard-escape-quit)

  ;; `C-M-o' opens buffer selection with `ibuffer-bs-show'. If the ibuffer
  ;; window is active (ivy: minibuffer) then pass through this key binding, so
  ;; in these modes `C-M-o' is free to be used for cyling through buffers.
  (define-key my/keys-minor-mode-map (kbd "C-M-o") ; was `split-line'
    `(menu-item "" ibuffer-bs-show
                :filter ,(lambda (cmd)
                           (unless (derived-mode-p
                                    'ivy-mode
                                    'minibuffer-inactive-mode
                                    'ibuffer-mode) cmd))))
  (advice-add 'ibuffer-bs-show :after #'ibuffer-bs-toggle-all)

  (define-key my/keys-minor-mode-map (kbd "C-o")  ; was `open-line'
    `(menu-item "" other-window
                :filter ,(lambda (cmd)
                           (unless (derived-mode-p
                                    'minibuffer-inactive-mode) cmd))))

  (defun my/keys-other-window-prev ()
    (interactive)
    (let ((current-prefix-arg '(-1)))
      (call-interactively 'other-window)))
  (define-key my/keys-minor-mode-map (kbd "C-S-o") 'my/keys-other-window-prev)

  (define-key my/keys-minor-mode-map (kbd "C-u C-o")
    `(menu-item "" window-swap-states
                :filter ,(lambda (cmd)
                           (unless (derived-mode-p
                                    'fundamental-mode
                                    'minibuffer-inactive-mode) cmd))))

  (define-key my/keys-minor-mode-map (kbd "M-k")   'kill-this-buffer)
  (define-key my/keys-minor-mode-map (kbd "M-K")   'kill-buffer-and-window)
  (define-key my/keys-minor-mode-map (kbd "M--")   'completion-at-point) ; "M-/" @ us-en-layout
  (define-key my/keys-minor-mode-map (kbd "M-j")   'recenter-top-bottom) ; was `comment-indent-new-line'

  (add-to-list 'minor-mode-overriding-map-alist
               (cons 'my/keys-minor-mode my/keys-minor-mode-map))
  (my/keys-minor-mode t)
#+END_SRC

** Ibuffer
#+BEGIN_SRC emacs-lisp
  (load-library "ibuffer")

  (setq ibuffer-display-summary nil
        ibuffer-formats
      '((mark " "
              (name 24 24 :left :elide) ; change: were originally 18s
              " " read-only modified
              " " (filename-and-process 36 36 :left))))

  (defadvice ibuffer (around ibuffer-point-to-most-recent) ()
    "Open ibuffer with cursor pointed to most recent buffer name."
    (let ((recent-buffer-name (buffer-name)))
      ad-do-it
      (ibuffer-jump-to-buffer recent-buffer-name)))
  (ad-activate 'ibuffer)

  (defun my/ibuffer-visit-buffer ()
    "Visit the buffer on this line."
    (interactive)
    (let ((buf (ibuffer-current-buffer t)))
      (pop-to-buffer buf)))

  (define-key ibuffer-mode-map (kbd "RET")     'my/ibuffer-visit-buffer)
  (define-key ibuffer-mode-map (kbd "o")       'ibuffer-visit-buffer-other-window-noselect)
  (define-key ibuffer-mode-map (kbd "C-M-o")   'ibuffer-forward-line)
  (define-key ibuffer-mode-map (kbd "C-M-S-o") 'ibuffer-backward-line)
#+END_SRC

** Expand-region
#+BEGIN_SRC emacs-lisp
  (starter-kit-install-if-needed 'expand-region)
  (define-key my/keys-minor-mode-map (kbd "M-SPC")   'er/expand-region)  ;; was `mark-paragraph'
  (define-key my/keys-minor-mode-map (kbd "M-S-SPC") 'er/contract-region)
  (define-key my/keys-minor-mode-map (kbd "M-h") 'er/expand-region)  ;; was `mark-paragraph'
  (define-key my/keys-minor-mode-map (kbd "M-H") 'er/contract-region)
#+END_SRC

** Multiple-cursors
#+BEGIN_SRC emacs-lisp
  (starter-kit-install-if-needed 'multiple-cursors)
  (load-library "multiple-cursors")
  (define-key my/keys-minor-mode-map (kbd "C-M-SPC") 'mc/mark-next-like-this) ; was `mark-sexp'
  (define-key my/keys-minor-mode-map (kbd "C-M-S-SPC") 'mc/unmark-next-like-this) ; was `mark-sexp'
#+END_SRC

** Ethan-Wspace
Obsoletes `mode-require-final-newlines' or `show-trailing-whitespace'.

Also decides when inserting tabs or spaces, so it may conflict with `indent-tabs-mode'.

You should also remove any customizations you have made to turn on
either ``show-trailing-whitespace`` or ``require-final-newline``; we
handle those for you. (But note that ``require-final-newline`` is
turned on by some modes based on the value of
``mode-require-final-newline``, so you may have to turn that off.)

#+BEGIN_SRC emacs-lisp
  (setq mode-require-final-newline nil)

  (starter-kit-install-if-needed 'ethan-wspace)
  (require 'ethan-wspace)
  (global-ethan-wspace-mode t)
#+END_SRC

** Toggle  Useful Emacs Modes
*** Indicate empty lines
#+BEGIN_SRC emacs-lisp
  (toggle-indicate-empty-lines)
#+END_SRC

*** Truncate lines in grep and occur modes
#+begin_src emacs-lisp
  (add-hook 'grep-mode-hook #'toggle-truncate-lines)
  (add-hook 'occur-mode-hook #'toggle-truncate-lines)
#+end_src

*** Auto revert buffers when changed externally
#+BEGIN_SRC emacs-lisp
  (setq auto-revert-interval 0.5)
  (global-auto-revert-mode t)
#+END_SRC

*** Remember open buffers and place of point
#+BEGIN_SRC emacs-lisp
  (toggle-save-place-globally)
  (setq desktop-modes-not-to-save '(tags-table-mode dired-mode))
  (desktop-save-mode 1)
  (desktop-read)
#+END_SRC

** Undo/redo with undo-tree-mode
Undo/redo history is a tree but manipulating this tree is a challenge. With
undo-tree you can press C-x u and view graphical representation of undo/redo
history. In undo-tree buffer press d to toggle diff and t to toggle timestamps,
q to quit and C-q to abort. See undo-tree-mode help for details or better
description of package using describe-package.

#+BEGIN_SRC emacs-lisp
  (starter-kit-install-if-needed 'undo-tree)
  (require 'undo-tree)
  (global-undo-tree-mode)

  (define-key my/keys-minor-mode-map (kbd "C-z") 'undo-tree-undo)
  (define-key my/keys-minor-mode-map (kbd "C-S-z") 'undo-tree-redo)
  (define-key my/keys-minor-mode-map (kbd "s-z") 'undo-tree-undo)
  (define-key my/keys-minor-mode-map (kbd "s-S-z") 'undo-tree-redo)
#+END_SRC

** Fast navigation with avy
[[https://github.com/abo-abo/avy][avy]] is a GNU Emacs package for jumping to visible text using a char-based
decision tree.

#+begin_src emacs-lisp
  (starter-kit-install-if-needed 'avy)

  ;; Use C-' since ivy will use it by default in its completion buffer.
  (global-set-key (kbd "C-'") 'avy-goto-line)
  (global-set-key (kbd "C-Ã¤") 'avy-goto-line)
  ;; Where C-' is located at on de-de keyboard.

  ;; Recommended in https://github.com/abo-abo/avy#bindings
  (eval-after-load "isearch"
      '(progn
	 (define-key isearch-mode-map (kbd "C-'") 'avy-isearch)
	 (define-key isearch-mode-map (kbd "C-Ã¤") 'avy-isearch)))
  ;; (global-set-key (kbd "C-c C-j") 'avy-resume)
#+end_src

#+TITLE: Starter Kit Hydras
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

Use ':tangle no' to disable specific source blocks

* Starter Kit Hydras

This package can be used to tie related commands into a family of
short bindings with a common prefix - a Hydra.

https://github.com/abo-abo/hydra

Assigning colors to a hydra recipe should follow this convention:

https://github.com/abo-abo/hydra/wiki/Hydra-Colors

|----------+-----------+-----------------------+-----------------|
| Body     | Head      | Executing NON-HEADS   | Executing HEADS |
| Color    | Inherited |                       |                 |
|          | Color     |                       |                 |
|----------+-----------+-----------------------+-----------------|
| amaranth | red       | Disallow and Continue | Continue        |
| teal     | blue      | Disallow and Continue | Quit            |
| pink     | red       | Allow and Continue    | Continue        |
| red      | red       | Allow and Quit        | Continue        |
| blue     | blue      | Allow and Quit        | Quit            |
|----------+-----------+-----------------------+-----------------|

** Check Dependencies

Determine whether required packages are installed. If not, use ELPA to
install them.
#+begin_src emacs-lisp
  (starter-kit-install-if-needed 'hydra)
#+end_src

** Hydra Emacs recipes
Taken from https://github.com/abo-abo/hydra/wiki/Emacs

*** Zoom

Make `text-scale-adjust' in [[file:/usr/share/emacs/26.3/lisp/face-remap.el.gz::(defun text-scale-adjust (inc)][face-remap.el]] work on all buffers globally
by introducing a global minor mode storing the zoom level and by adding
all hydra key bindings to `global-map'.

#+begin_src emacs-lisp
  (define-globalized-minor-mode my/global-text-scale-mode text-scale-mode
    (lambda () (text-scale-mode 1)))

  (defun my/global-text-scale-adjust (inc)
    (interactive)
    (text-scale-set 1)
    (kill-local-variable 'text-scale-mode-amount)
    (setq-default text-scale-mode-amount (+ text-scale-mode-amount inc))
    (my/global-text-scale-mode 1))

  (defhydra my/hydra-zoom (global-map "")
    "zoom"
    ("C-+" (my/global-text-scale-adjust 1)  "in")
    ("C--" (my/global-text-scale-adjust -1) "out")
    ("C-0" (my/global-text-scale-mode -1)   "reset")
    ("q"   nil                              "quit" :color blue))
#+end_src

*** Toggle Modes

#+begin_src emacs-lisp
  (defun my/toggle-text-mode-truncate-lines ()
    "Toggle whether to use Truncate Lines in Text mode and related modes.
  This command affects all buffers that use modes related to Text mode,
  both existing buffers and buffers that you subsequently create."
    (interactive)
    (let ((enable-mode (not truncate-lines)))
      (setq-default truncate-lines enable-mode)
      (dolist (buffer (buffer-list))
        (with-current-buffer buffer
          (toggle-truncate-lines (if enable-mode 1 0))))
      (message "Truncate long lines %s in all buffers "
               (if enable-mode "enabled" "disabled"))))

  (defhydra hydra-toggle (global-map "M-m" :color red :hint none)
    "
[_T_]/[_t_]: ?t? truncate,
[_W_]/[_w_]: ?w? whitespace,
[_F_]/[_f_]: ?f? fill (fill-column: %(current-fill-column)),
[_L_]/[_l_]: ?l? linum,
[_z_]: zoom, [_q_]: quit."
    ("T" my/toggle-text-mode-truncate-lines)
    ("t" toggle-truncate-lines
      (if truncate-lines "[x]" "[ ]"))
    ("W" whitespace-mode)
    ("w" whitespace-mode
      (if (bound-and-true-p whitespace-mode) "[x]" "[ ]"))
    ("F" toggle-text-mode-auto-fill)
    ("f" auto-fill-mode
      (if (bound-and-true-p auto-fill-function) "[x]" "[ ]"))
    ("L" linum-mode)
    ("l" linum-mode
      (if (bound-and-true-p linum-mode) "[x]" "[ ]"))
    ("z" hydra-zoom/body       :color teal)
    ("q" nil                   :color blue))

  (global-set-key (kbd "M-m") 'hydra-toggle/body)
#+end_src

*** Yank

Repeatable yank(-pop) command, with an option to switch to a list view using `helm` or
`browse-kill-ring`.

#+begin_src emacs-lisp
  (starter-kit-install-if-needed 'browse-kill-ring)
  ;; (browse-kill-ring-default-keybindings)
  (defhydra hydra-yank-pop ()
    "yank"
    ("C-y" yank nil)
    ("M-y" yank-pop nil)
    ("y" (yank-pop 1) "next")
    ("Y" (yank-pop -1) "prev")
    ("l" browse-kill-ring "list" :color blue))   ; or helm-show-kill-ring
  (global-set-key (kbd "M-y") #'hydra-yank-pop/yank-pop)
  (global-set-key (kbd "C-y") #'hydra-yank-pop/yank)
#+end_src

*** Movement

For many Emacs users, basic movement commands are [the most frequently used](http://ergoemacs.org/emacs/command-frequency.html)! Set up a movement group that means we don't need to hold the control key.

#+begin_src emacs-lisp
  (defhydra hydra-move
       (:body-pre (next-line))
       "move"
       ("j" next-line)
       ("k" previous-line)
       ("l" beginning-of-line)
       ("รถ" move-end-of-line)
       ("SPC" scroll-up-command)
       ;; Converting M-v to V here by analogy.
       ("S-SPC" scroll-down-command)
       ("M-j" recenter-top-bottom))
  (global-set-key (kbd "M-j") #'hydra-move/recenter-top-bottom)
#+end_src

*** Goto Line

Enhanced goto-line command:
 * Temporarily show line-numbers while the hydra is active
 * Use `m` to set the mark and `g` to jump to another line, i.e. to mark a range of lines by number.
 * Note that prefix arguments work, for example:
     *  `M-g 50 RET`  -- go to line 50
     *  `5 5 g` -- jump ahead to line 55
     *  `m` -- set the mark
     *  `6 5 g` -- extend the marked region to line 65
     *  `M-w` -- save the region to the kill-ring and exit the hydra

#+begin_src emacs-lisp
(defhydra hydra-goto-line (goto-map ""
                           :pre (linum-mode 1)
                           :post (linum-mode -1))
  "goto-line"
  ("g" goto-line "go")
  ("m" set-mark-command "mark" :bind nil)
  ("q" nil "quit"))
#+end_src

*** Outline minor mode

Outline minor mode keybingings are often repeated and hard to remember. This hydra solve it with the same keybindings. outline-minor-mode must be enabled.

#+begin_src emacs-lisp :tangle no
(defhydra hydra-outline (:color pink :hint nil)
  "
^Hide^             ^Show^           ^Move
^^^^^^------------------------------------------------------
_q_: sublevels     _a_: all         _u_: up
_t_: body          _e_: entry       _n_: next visible
_o_: other         _i_: children    _p_: previous visible
_c_: entry         _k_: branches    _f_: forward same level
_l_: leaves        _s_: subtree     _b_: backward same level
_d_: subtree

"
  ;; Hide
  ("q" hide-sublevels)    ; Hide everything but the top-level headings
  ("t" hide-body)         ; Hide everything but headings (all body lines)
  ("o" hide-other)        ; Hide other branches
  ("c" hide-entry)        ; Hide this entry's body
  ("l" hide-leaves)       ; Hide body lines in this entry and sub-entries
  ("d" hide-subtree)      ; Hide everything in this entry and sub-entries
  ;; Show
  ("a" show-all)          ; Show (expand) everything
  ("e" show-entry)        ; Show this heading's body
  ("i" show-children)     ; Show this heading's immediate child sub-headings
  ("k" show-branches)     ; Show all sub-headings under this heading
  ("s" show-subtree)      ; Show (expand) everything in this heading & below
  ;; Move
  ("u" outline-up-heading)                ; Up
  ("n" outline-next-visible-heading)      ; Next
  ("p" outline-previous-visible-heading)  ; Previous
  ("f" outline-forward-same-level)        ; Forward - same level
  ("b" outline-backward-same-level)       ; Backward - same level
  ("z" nil "leave"))

(global-set-key (kbd "C-c #") 'hydra-outline/body) ; by example
#+end_src

*** Occur
This Hydra coupled by the saner occur defined [here](http://oremacs.com/2015/01/26/occur-dwim/) as well as some other customization allows:
- searching for the regexp
- navigating matches without leaving the occur buffer
- navigating using simple key strokes
- hiding the occur buffer
- re-attaching to the occur buffer in a split window

Keystrokes having meaning to occur are preserved and should work as per defaults. For example <kbd>e</kbd> should put you in #+end_srcoccur-edit-mode#+end_src, <kbd>q</kbd> should quit the occur mode, etc.

Complete code is below:

#+begin_src lisp :tangle no
  (defun occur-dwim ()
    "Call `occur' with a sane default, chosen as the thing under point or selected region"
    (interactive)
    (push (if (region-active-p)
	      (buffer-substring-no-properties
	       (region-beginning)
	       (region-end))
	    (let ((sym (thing-at-point 'symbol)))
	      (when (stringp sym)
		(regexp-quote sym))))
	  regexp-history)
    (call-interactively 'occur))

  ;; Keeps focus on *Occur* window, even when when target is visited via RETURN key.
  ;; See hydra-occur-dwim for more options.
  (defadvice occur-mode-goto-occurrence (after occur-mode-goto-occurrence-advice activate)
    (other-window 1)
    (hydra-occur-dwim/body))

  ;; Focus on *Occur* window right away.
  (add-hook 'occur-hook (lambda () (other-window 1)))

  (defun reattach-occur ()
    (if (get-buffer "*Occur*")
      (switch-to-buffer-other-window "*Occur*")
      (hydra-occur-dwim/body) ))

  ;; Used in conjunction with occur-mode-goto-occurrence-advice this helps keep
  ;; focus on the *Occur* window and hides upon request in case needed later.
  (defhydra hydra-occur-dwim ()
    "Occur mode"
    ("o" occur-dwim "Start occur-dwim" :color red)
    ("j" occur-next "Next" :color red)
    ("k" occur-prev "Prev":color red)
    ("h" delete-window "Hide" :color blue)
    ("r" (reattach-occur) "Re-attach" :color red))

  (global-set-key (kbd "C-x o") 'hydra-occur-dwim/body)
#+end_src

*** Transpose

Many transpose options collected so they're easily accessible.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-t")
		  (defhydra hydra-transpose (:color red)
		    "Transpose"
		    ("C" (transpose-chars -1))
		    ("c" transpose-chars "characters")
		    ("W" (transpose-words -1))
		    ("w" transpose-words "words")
		    ("L" (transpose-lines -1))
		    ("l" transpose-lines "lines")
		    ("S" (transpose-sentences -1))
		    ("s" transpose-sentences "sentences")
		    ("P" (transpose-paragraphs -1))
		    ("p" transpose-paragraphs "paragraphs")
		    ;; ("o" org-transpose-words "Org mode words")
		    ;; ("e" org-transpose-elements "Org mode elements")
		    ;; ("t" org-table-transpose-table-at-point "Org mode table")
		    ("q" nil "cancel" :color blue)))
#+end_src

*** Ediff

Ediff is a comprehensive visual interface to Unix diff and patch utilities.  See `(info "(ediff) Introduction")` for more information on Ediff.

This is a simple hydra to access most common features: comparing buffers, files, revisions or regions side by side.

#+begin_src emacs-lisp :tangle no
  (defhydra hydra-ediff (:color blue :hint nil)
    "
^Buffers           Files           VC                     Ediff regions
----------------------------------------------------------------------
_b_uffers           _f_iles (_=_)       _r_evisions              _l_inewise
_B_uffers (3-way)   _F_iles (3-way)                          _w_ordwise
		    _c_urrent file
"
    ("b" ediff-buffers)
    ("B" ediff-buffers3)
    ("=" ediff-files)
    ("f" ediff-files)
    ("F" ediff-files3)
    ("c" ediff-current-file)
    ("r" ediff-revision)
    ("l" ediff-regions-linewise)
    ("w" ediff-regions-wordwise)
    ("q" nil "cancel" :color blue))
#+end_src

*** Dired
#+begin_src emacs-lisp
  (load-library "dired")
  (defvar dired-mode-map)

  (declare-function dired-mark "dired")
  (defhydra my/hydra-dired-marked-items (dired-mode-map "")
    "
%(dired-mark-prompt nil (dired-get-marked-files)): "
    ("m" dired-mark                      "mark")
    ("<backspace>" dired-unmark-backward "unmark back")
    ("u" dired-unmark                    "unmark")
    ("t" dired-toggle-marks              "toggle")
    ("j" dired-next-marked-file          "next")
    ("k" dired-prev-marked-file          "prev")
    ("*" hydra-dired-mark-special/body   "mark special" :color teal)
    ("U" dired-unmark-all-marks          "unmark all" :color blue)
    ("q" nil                             "quit" :color blue))

  (declare-function dired-copy-filename-as-kill "dired")
  (defhydra hydra-dired-copy-filename-as-kill (dired-mode-map "")
      "
topdir: %(eval dired-directory)

copy: [C-u _w_]: path from topdir, [C-u 0 _w_]: path from root, "
      ("w" dired-copy-filename-as-kill "filename")
      ("q" nil :color blue))

  (defhydra hydra-dired-mark-special (:color blue)
    "mark"
    ("%"  dired-mark-files-regexp "regexp")
    ("("  dired-mark-sexp         "sexp")
    ("*"  dired-mark-executables  "executables")
    ("."  dired-mark-extension    "extension")
    ("/"  dired-mark-directories  "directories")
    ("@"  dired-mark-symlinks     "symlinks")
    ("O"  dired-mark-omitted      "omitted")
    ("s"  dired-mark-subdir-files "subdir files")
    ("q"  nil                     "quit"))

  (defhydra hydra-dired (:color blue :hint none)
      "
topdir: %(eval dired-directory)

    File             Inode          Marks            Display
  -----------------------------------------------------------------------------
    _d_ flag deletion  ^ ^               _m_ mark             ?(? _(_ details
    _x_ expunge        ^ ^               _*_ mark special     ?C-x M-o? _C-x M-o_ omitหฃ
    ^ ^                _M_ chmod         ^ ^                  ^ ^
    _w_ copy path      _G_ chgrp         _F_ open markedหฃ     _s_ sort
    _C_ copy           ^ ^               _D_ delete marked    ^ ^
    _R_ rename         Directory         ^ ^                  ^ ^
    ^ ^                ---------         ^ ^                _C-M-i_ jump
    _e_ Ediff          _=_ diff          ^ ^                  _C-o_ view other window
    _c_ compress to    _+_ mkdir         _A_ find regexp      _o_ other window
    _Z_ (un)compress   _Z_ (un)tar.gz    _Q_ repl regexp      _g_ revert buf
    "
      ("C-M-i" dired-jump :color red)
      ("*" hydra-dired-mark-special/body :color teal)
      ("(" dired-hide-details-mode
         (if (bound-and-true-p dired-hide-details-mode)
           "[ ]" "[x]") :color red)
      ("C-x M-o" dired-omit-mode
         (if (bound-and-true-p dired-omit-mode)
           "[x]" "[ ]") :color red)
      ("+" dired-create-directory)
      ("=" dired-diff)
      ("?" dired-summary :color red)
      ("A" dired-do-find-regexp)
      ("C" dired-do-copy)
      ("c" my/dired-do-compress-to)
      ("d" dired-flag-file-deletion :color red)
      ("D" dired-do-delete)
      ("e" dired-ediff-files)
      ("F" dired-do-find-marked-files)
      ("G" dired-do-chgrp)
      ("g" revert-buffer)
      ("M" dired-do-chmod)
      ("m" my/hydra-dired-marked-items/dired-mark :color teal)
      ("C-o" dired-display-file :color red)
      ("o" dired-find-file-other-window)
      ("Q" dired-do-find-regexp-and-replace)
      ("R" dired-do-rename)
      ("s" dired-sort-toggle-or-edit :color red)
      ("w" hydra-dired-copy-filename-as-kill/body :color teal)
      ("x" dired-do-flagged-delete)
      ("Z" dired-do-compress)
      ("q" nil))
#+end_src

#+begin_src emacs-lisp
  (defun my/hydra-dired-mode-keys ()
    "my hydra keys for `dired'."
    (define-key dired-mode-map (kbd "?") 'hydra-dired/body))
  (add-hook 'dired-mode-hook #'my/hydra-dired-mode-keys)
#+end_src

*** Ibuffer
#+begin_src emacs-lisp
  (load-library "ibuffer")
  (defvar ibuffer-mode-map)

  (declare-function ibuffer-mark-forward "ibuffer")
  (defhydra my/hydra-ibuffer-marked-items (ibuffer-mode-map "")
    "
\* [%(length (ibuffer-get-marked-buffers)) buffers]: "
    ("m" ibuffer-mark-forward               "mark")
    ("<backspace>" ibuffer-unmark-backward  "unmark back")
    ("u" ibuffer-unmark-forward             "unmark")
    ("t" ibuffer-toggle-marks               "toggle")
    ("j" ibuffer-forward-next-marked        "next")
    ("k" ibuffer-backwards-next-marked      "prev")
    ("*" my/hydra-ibuffer-mark-special/body "mark special" :color teal)
    ("U" ibuffer-unmark-all                 "unmark all" :color blue)
    ("q" nil                                "quit" :color blue))

  (defhydra my/hydra-ibuffer-mark-special (:color blue)
    "mark"
    ("/" ibuffer-mark-dired-buffers     "dired")
    ("M" ibuffer-mark-by-mode           "by mode")
    ("h" ibuffer-mark-help-buffers      "help")
    ("m" ibuffer-mark-modified-buffers  "modified")
    ("r" ibuffer-mark-read-only-buffers "read-only")
    ("s" ibuffer-mark-special-buffers   "special")
    ("u" ibuffer-mark-unsaved-buffers   "unsaved")
    ("." ibuffer-mark-old-buffers       "old")
    ("q"  nil                           "quit"))

(defhydra hydra-ibuffer-main (:hint nil :color blue)
  "
    Buffer             Actions         Marks            Display
  ---------------------------------------------------------------------------
    _d_ flag deletion   _/_ filter          _m_ mark            _(_ details
    _x_ expunge         ^ ^                 _*_ mark special    _)_ omit-mode
    ^ ^                 ^ ^                 ^ ^                 _,_ sort toogle
    _w_ copy filename   _Q_ replace marked  _O_ occur marked    _s_ sort special
    _C_ copy buffer     _I_ regexp marked   _A_ view marked     ^ ^
    ^ ^                 ^ ^                 _S_ save marked     _H_ other frame
    ^ ^                 ^ ^                 _V_ revert marked   _o_ other window
    _!_ shell file      ^ ^                 _D_ delete marked   _g_ revert buf
    "
  ("d" ibuffer-mark-for-delete)
  ("x" ibuffer-do-kill-on-deletion-marks)
  ("w" ibuffer-copy-filename-as-kill)
  ("C" ibuffer-copy-buffername-as-kill)

  ("!" ibuffer-do-shell-command-file)

  ("/" hydra-ibuffer-filter/body :color teal)

  ("Q" ibuffer-do-query-replace)
  ("I" ibuffer-do-query-replace-regexp)
  ;; ("N" ibuffer-do-shell-command-pipe-replace "shell-cmd-pipe-replace")
  ;; ("X" ibuffer-do-shell-command-pipe         "shell-command-pipe")

  ("m" ibuffer-mark-forward)
  ("*" my/hydra-ibuffer-mark-special/body :color teal)

  ("O" ibuffer-do-occur)
  ("A" ibuffer-do-view)
  ("S" ibuffer-do-save)
  ("D" ibuffer-do-delete)
  ("V" ibuffer-do-revert)

  ("," ibuffer-toggle-sorting-mode)
  ("s" hydra-ibuffer-sort/body :color teal)

  ("H" ibuffer-do-view-other-frame)
  ("o" ibuffer-visit-buffer-other-window-noselect)
  ("g" ibuffer-update)
  ("q" nil :color blue))

(defhydra hydra-ibuffer-mark (:color teal :columns 5)
  "Mark"
  ("M" ibuffer-mark-by-mode "mode")
  ("m" ibuffer-mark-modified-buffers "modified")
  ("u" ibuffer-mark-unsaved-buffers "unsaved")
  ("s" ibuffer-mark-special-buffers "special")
  ("r" ibuffer-mark-read-only-buffers "read-only")
  ("/" ibuffer-mark-dired-buffers "dired")
  ("e" ibuffer-mark-dissociated-buffers "dissociated")
  ("h" ibuffer-mark-help-buffers "help")
  ("z" ibuffer-mark-compressed-file-buffers "compressed")
  ("q" nil :color blue))

(defhydra hydra-ibuffer-sort (:color teal :columns 3)
  "Sort"
  ("i" ibuffer-invert-sorting "invert")
  ("a" ibuffer-do-sort-by-alphabetic "alphabetic")
  ("v" ibuffer-do-sort-by-recency "recently used")
  ("s" ibuffer-do-sort-by-size "size")
  ("f" ibuffer-do-sort-by-filename/process "filename")
  ("m" ibuffer-do-sort-by-major-mode "mode")
  ("q" nil :color blue))

(defhydra hydra-ibuffer-filter (:color teal :columns 4)
  "Filter"
  ("m" ibuffer-filter-by-used-mode "mode")
  ("M" ibuffer-filter-by-derived-mode "derived mode")
  ("n" ibuffer-filter-by-name "name")
  ("c" ibuffer-filter-by-content "content")
  ("e" ibuffer-filter-by-predicate "predicate")
  ("f" ibuffer-filter-by-filename "filename")
  (">" ibuffer-filter-by-size-gt "size")
  ("<" ibuffer-filter-by-size-lt "size")
  ("/" ibuffer-filter-disable "disable")
  ("q" nil :color blue))
#+end_src

#+begin_src emacs-lisp
  (defun my/hydra-ibuffer-mode-keys ()
    "my hydra keys for `ibuffer'."
    (define-key ibuffer-mode-map (kbd "?") 'hydra-ibuffer-main/body))
  (add-hook 'ibuffer-hook #'my/hydra-ibuffer-mode-keys)
#+end_src

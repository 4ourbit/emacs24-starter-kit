#+TITLE: Starter Kit Latex
#+OPTIONS: toc:nil num:nil ^:nil

This is part of the [[file:starter-kit.org][Emacs Starter Kit]].

* Starter Kit Latex
  :PROPERTIES:
  :results:  silent
  :END:
Support for editing Latex

** Prerequesites

In order to use AUCTeX the following software is required in addition:

*** A working TeX installation

**** UNIX-Style systems
A popular TEX system is TEX Live which may also be available via the
package system of your operating system distribution.

**** Mac OSX
A popular TEX system for Mac OS X is MacTEX which is based on TEX
Live.

*** A recent Ghostscript

This is needed for operation of preview-latex in both DVI and PDF
mode. Most versions of Ghostscript nowadays in use should work fine
(version 7.0 and newer).

** Installation

#+begin_src emacs-lisp
  (starter-kit-install-if-needed 'auctex)
#+end_src

** Customization

#+begin_src emacs-lisp
(when (locate-library "auctex")
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)

  (add-hook 'LaTeX-mode-hook 'auto-fill-mode)
  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t)
)

#+end_src
   
* Reference management with Ebib

#+BEGIN_SRC emacs-lisp
  (starter-kit-install-if-needed 'ebib)
  ;; Do not (require 'ebib) since user variables are set at a later point in the
  ;; Emacs Starter kit init process.

  (with-eval-after-load 'ebib
    (setq ebib-bibtex-dialect 'biblatex)

    (setq ebib-preload-bib-files ebib-my-bib-file)
    (setq ebib-file-search-dirs ebib-my-file-search-dirs)
    (setq ebib-notes-use-single-file ebib-my-annotations-file)

    (add-to-list 'ebib-file-associations (cons "pdf" my-pdf-viewer))

    (defun ebib-create-org-time-stamp (key db) (format-time-string (org-time-stamp-format (current-time) 'inactive)))
    (add-to-list 'ebib-notes-template-specifiers '(?Q . ebib-create-org-time-stamp))
    (defun ebib-create-org-identifier-key-only (key db) key)  ;; pure ebib uid for backlinking in org cite links
    (add-to-list 'ebib-notes-template-specifiers '(?K . ebib-create-org-identifier-key-only))
    (setq ebib-notes-template "* TODO [[cite:%K][%T]]\n:PROPERTIES:\n:Custom_id: %K\n:Created:   %Q\n:Effort:    Shift-Right\n:END:\n+ >|<\n")

    ;; add timestamp to bib entries for `ebib-list-recent'
    (setq ebib-use-timestamp t)

    ;; use cite: when pushing from ebib to org via `ebib-insert-citation'
    (setq ebib-citation-commands (assq-delete-all 'org-mode ebib-citation-commands))
    (add-to-list 'ebib-citation-commands '(org-mode (("cite" "[[cite:%K][%D]]")))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; disable org-bibtex bibfile management, since we are using ebib
  (setq org-modules (remove 'org-bibtex org-modules))
#+END_SRC

** Citation completion with reftex
#+BEGIN_SRC emacs-lisp
  ;;; org-ref-reftex.el --- org-ref completion setup with reftex  -*- lexical-binding: t; -*-

  ;; Copyright (C) 2016  John Kitchin

  ;; Author: John Kitchin <jkitchin@andrew.cmu.edu>
  ;; Keywords:

  ;; This program is free software; you can redistribute it and/or modify
  ;; it under the terms of the GNU General Public License as published by
  ;; the Free Software Foundation, either version 3 of the License, or
  ;; (at your option) any later version.

  ;; This program is distributed in the hope that it will be useful,
  ;; but WITHOUT ANY WARRANTY; without even the implied warranty of
  ;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ;; GNU General Public License for more details.

  ;; You should have received a copy of the GNU General Public License
  ;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

  ;;; Commentary: This is a bare-bones completion engine using only org-mode and
  ;;; vanilla Emacs functions. It is not being further developed.

  ;; use same format when using reftex mode in org (org-reftex-citation)
  (defun org-mode-reftex-setup ()
    "Setup reftex for `org-mode'."
    (and (buffer-file-name)
         (file-exists-p (buffer-file-name))
         (global-auto-revert-mode t))
    (make-local-variable 'reftex-cite-format)
    (setq reftex-cite-format 'org))

  ;;  (add-hook 'org-mode-hook 'org-mode-reftex-setup)

  (eval-after-load 'reftex-vars
    '(progn
       (add-to-list 'reftex-cite-format-builtin
                    '(org "Org-mode citation" ((?m . "[[cite:%l][]]")     ; default
                                               (?d . ",%l")            ; for appending
                                               (?a . "autocite:%l")
                                               (?t . "citet:%l")
                                               (?T . "citet*:%l")
                                               (?p . "citep:%l")
                                               (?P . "citep*:%l")
                                               (?h . "citeauthor:%l")
                                               (?H . "citeauthor*:%l")
                                               (?y . "citeyear:%l")
                                               (?x . "citetext:%l")
                                               (?n . "nocite:%l"))))))

  (defun my/org-reftex-citation (alternative-cite)
    "Insert a default citation link using reftex.
    If you are on a link, it appends to the end of the link,
    otherwise, a new link is inserted.  Use a prefix
    arg (ALTERNATIVE-CITE) to get a menu of citation types."
    (interactive "P")
    (let ((reftex-docstruct-symbol 'org--rds)
          org--rds bib)
      (org-with-wide-buffer
       (let ((case-fold-search t)
             (re "^[ \t]*#\\+BIBLIOGRAPHY:[ \t]+\\([^ \t\n]+\\)"))
         (if (not (save-excursion
                    (or (re-search-forward re nil t)
                        (re-search-backward re nil t))))
             (user-error "No bibliography defined in file")
           (setq bib (concat (match-string 1) ".bib")
                 org--rds (list (list 'bib bib))))))

    (let* ((object (org-element-context))
           (org-ref-cite-types '("cite" "nocite"))
           (org-ref-default-citation-link "cite")
           (link-string-end (org-element-property :end object)))

      (if (not alternative-cite)

          (cond
           ;; case where we are in a link
           ((and (equal (org-element-type object) 'link)
                 (-contains? org-ref-cite-types
                             (org-element-property :type object)))
            (goto-char link-string-end)
            ;; sometimes there are spaces at the end of the link
            ;; this code moves point pack until no spaces are there
            (skip-chars-backward " ")
            (insert (concat "," (mapconcat
                                 'identity
                                 (reftex-citation t ?a) ","))))

           ;; We are next to a link, and we want to append
           ((save-excursion
              (backward-char)
              (and (equal (org-element-type (org-element-context)) 'link)
                   (-contains? org-ref-cite-types
                               (org-element-property
                                :type (org-element-context)))))
            (skip-chars-backward " ")
            (insert (concat "," (mapconcat
                                 'identity
                                 (reftex-citation t ?a) ","))))

           ;; insert fresh link
           (t
            (insert
             (concat org-ref-default-citation-link
                     ":"
                     (mapconcat 'identity (reftex-citation t) ",")))))

        ;; you pressed a C-u so we run this code
        (reftex-citation)))))
#+END_SRC

** Ebib cite links in org
#+BEGIN_SRC emacs-lisp
    ;; Add universal cite links to org-link-parameters
    (defun my/export-cite (path desc format)
      "Export [[cite:cohen93]] as \cite{cohen93} in LaTeX."
      (if (eq format 'latex)
          (if (or (not desc) (equal 0 (search "cite:" desc)))
              (format "\\cite{%s}" path)
            (format "\\cite[%s]{%s}" desc path))))
    (require 'org-ebib)
    ;; does define (org-link-set-parameters "ebib" :follow #'org-ebib-open :store #'org-ebib-store-link)
    ;; TODO maybe remove!?
  (org-link-set-parameters "cite"
     :follow #'org-ebib-open
     :store #'org-ebib-store-link
     :export 'my/export-cite
     :display 'full)

    ;; cite complete and face attributes require ebib to be loaded
  (with-eval-after-load 'ebib
    (org-link-set-parameters "cite"
       :complete (lambda () (ebib--execute-when
         ((database)
           (let* ((databases (ebib--get-local-databases))
                  (collection (ebib--create-collection-from-db databases)))
             (when collection
               (let ((key (completing-read "Key to insert: " collection nil t nil 'ebib--key-history)))
                 (format "[[cite:%s][]]" key)))))
        ((default)
         (error "[Ebib] No database loaded"))))
       :face (lambda (path) (ebib--execute-when
            ((database)
             (let* ((databases (ebib--get-local-databases))
                    (collection (ebib--create-collection-from-db databases)))
               (if (member path collection)
                           '(:inherit org-link :foreground "sea green")
                           '(:inherit org-link :foreground "red"))))
           ((default) 'org-link))))
    (dolist (buf (buffer-list (current-buffer)))
      (with-current-buffer buf
        (if (eq major-mode 'org-mode)
          (font-lock-fontify-buffer)))))
#+END_SRC

* Activate Org-Cdlatex-mode
#+BEGIN_SRC emacs-lisp
  (defun my/org-cdlatex-mode ()
    ;; apostrophe for backtick
    ;; (setq cdlatex-math-symbol-prefix 37)
    (org-cdlatex-mode)

    ;; dollar initiates latex region
    (setq-local electric-pair-pairs (append electric-pair-pairs '((?$ . ?$))))
    (setq-local electric-pair-text-pairs electric-pair-pairs)
    ;; (local-set-key "$" 'cdlatex-dollar) does the same but not as smooth

    ;; TODO visualize dollar pairs

    ;; pretty entities will always be toggled on in org
    ;; except when point is in latex region (for cdlatex to work properly)
    (defun my/pretty-entities-post-command-hook ()
      (let ((new-state (list (texmathp) org-pretty-entities)))
        (cond
         ((equal new-state '(t t)) (org-toggle-pretty-entities))
         ((equal new-state '(nil nil)) (org-toggle-pretty-entities)))))
    (add-hook 'post-command-hook  #'my/pretty-entities-post-command-hook nil :local)
  )
  (add-hook 'org-mode-hook #'my/org-cdlatex-mode)
#+END_SRC
